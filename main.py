#!/usr/bin/env python3
import os
import sys
import time
import json
import requests
import random
import sqlite3
import logging
import schedule
from datetime import datetime
from urllib.parse import urljoin
from pathlib import Path

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('userbot.log'),
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger('K-Connect-UserBot')

API_URL = 'https://k-connect.ru/api/'
TOKEN = 'asdfasdfasdfasdfasghashasdfhashASHSADFHDFH' # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π TOKEN
USERNAME = 'qsqsqs@gmail.com'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π username
PASSWORD = '12312312.'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å
# –£–∫–∞–∂–∏—Ç–µ –∏–º—è –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ ID –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (–æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞)
CHANNEL_NAME = 'memeKconnect'  # –ò–º—è –∫–∞–Ω–∞–ª–∞ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
ACCOUNT_ID = None  # ID –∞–∫–∫–∞—É–Ω—Ç–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –µ—Å–ª–∏ CHANNEL_NAME –ø—É—Å—Ç–æ–π)

MEMES_FOLDER = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'memes')
DATABASE_FILE = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'posted_files.db')

os.makedirs(MEMES_FOLDER, exist_ok=True)

session = requests.Session()

def get_user_channels():

    try:
        channels_url = urljoin(API_URL, 'users/my-channels')
        response = session.get(channels_url)
        
        if response.status_code == 200:
            data = response.json()
            if data.get('success'):
                logger.info(f"–£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
                return data
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤: {data.get('error')}")
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤. –ö–æ–¥: {response.status_code}")
    except Exception as e:
        logger.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤: {str(e)}")
    
    return None

def switch_account(account_id):

    try:
        switch_url = urljoin(API_URL, 'users/switch-account')
        data = {"account_id": account_id}
        
        response = session.post(switch_url, json=data)
        
        if response.status_code == 200:
            result = response.json()
            if result.get('success'):
                logger.info(f"–£—Å–ø–µ—à–Ω–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç {account_id}")
                return True
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞: {result.get('error')}")
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞. –ö–æ–¥: {response.status_code}")
    except Exception as e:
        logger.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞: {str(e)}")
    
    return False

def find_account_by_name(channels_data, name):

    if not channels_data:
        return None
        
    channels = channels_data.get('channels', [])
    for channel in channels:
        if channel.get('name').lower() == name.lower() or channel.get('username').lower() == name.lower():
            return channel.get('id')
    
    main_account = channels_data.get('main_account')
    if main_account and (main_account.get('name').lower() == name.lower() or 
                          main_account.get('username').lower() == name.lower()):
        return main_account.get('id')
    
    current_account = channels_data.get('current_account')
    if current_account and (current_account.get('name').lower() == name.lower() or 
                             current_account.get('username').lower() == name.lower()):
        return current_account.get('id')
    
    return None

def authenticate():

    logger.info("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è...")
    
    session.cookies.set("konnect_session", TOKEN, domain="k-connect.ru")
    
    try:
        auth_check_url = urljoin(API_URL, 'auth/check')
        auth_response = session.get(auth_check_url)
        
        if auth_response.status_code == 200:
            auth_data = auth_response.json()
            if auth_data.get('isAuthenticated'):
                logger.info("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å –ø–æ–º–æ—â—å—é cookie —É—Å–ø–µ—à–Ω–∞")
                
                return handle_account_switching()
            else:
                logger.warning("–°–µ—Å—Å–∏—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞, —Ç—Ä–µ–±—É–µ—Ç—Å—è –ª–æ–≥–∏–Ω")
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Å—Å–∏–∏. –ö–æ–¥: {auth_response.status_code}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {str(e)}")
    
    try:
        login_url = urljoin(API_URL, 'auth/login')
        login_data = {
            "usernameOrEmail": USERNAME,
            "password": PASSWORD
        }
        
        login_response = session.post(login_url, json=login_data)
        
        if login_response.status_code == 200:
            login_data = login_response.json()
            if login_data.get('success'):
                logger.info("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–∞")
                
                return handle_account_switching()
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {login_data.get('error')}")
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ö–æ–¥: {login_response.status_code}")
    except Exception as e:
        logger.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {str(e)}")
    
    return False

def handle_account_switching():

    if not CHANNEL_NAME and not ACCOUNT_ID:
        logger.info("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–µ–∫—É—â–∏–π –∞–∫–∫–∞—É–Ω—Ç (–Ω–µ —É–∫–∞–∑–∞–Ω –∫–∞–Ω–∞–ª –∏–ª–∏ ID –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è)")
        return True
    
    channels_data = get_user_channels()
    if not channels_data:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤")
        return False
    
    current_account = channels_data.get('current_account', {})
    logger.info(f"–¢–µ–∫—É—â–∏–π –∞–∫–∫–∞—É–Ω—Ç: {current_account.get('name')} ({current_account.get('id')})")
    
    if ACCOUNT_ID:
        if str(current_account.get('id')) == str(ACCOUNT_ID):
            logger.info(f"–£–∂–µ –≤ –Ω—É–∂–Ω–æ–º –∞–∫–∫–∞—É–Ω—Ç–µ —Å ID {ACCOUNT_ID}")
            return True
            
        logger.info(f"–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç —Å ID {ACCOUNT_ID}")
        return switch_account(ACCOUNT_ID)
    
    if CHANNEL_NAME:
        account_id = find_account_by_name(channels_data, CHANNEL_NAME)
        
        if not account_id:
            logger.error(f"–ö–∞–Ω–∞–ª —Å –∏–º–µ–Ω–µ–º '{CHANNEL_NAME}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
            
        if str(current_account.get('id')) == str(account_id):
            logger.info(f"–£–∂–µ –≤ –Ω—É–∂–Ω–æ–º –∞–∫–∫–∞—É–Ω—Ç–µ: {CHANNEL_NAME} ({account_id})")
            return True
            
        logger.info(f"–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç {CHANNEL_NAME} ({account_id})")
        return switch_account(account_id)
    
    return True

def init_database():

    conn = sqlite3.connect(DATABASE_FILE)
    cursor = conn.cursor()
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS posted_files (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        filename TEXT NOT NULL,
        post_id INTEGER,
        post_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )
    ''')
    conn.commit()
    conn.close()
    logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

def is_file_posted(filename):

    conn = sqlite3.connect(DATABASE_FILE)
    cursor = conn.cursor()
    cursor.execute("SELECT id FROM posted_files WHERE filename = ?", (filename,))
    result = cursor.fetchone()
    conn.close()
    return result is not None

def mark_file_as_posted(filename, post_id):

    conn = sqlite3.connect(DATABASE_FILE)
    cursor = conn.cursor()
    cursor.execute(
        "INSERT INTO posted_files (filename, post_id, post_date) VALUES (?, ?, ?)",
        (filename, post_id, datetime.now())
    )
    conn.commit()
    conn.close()
    logger.info(f"–§–∞–π–ª {filename} –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–π —Å post_id {post_id}")

def get_files_to_post():

    allowed_extensions = {'png', 'jpg', 'jpeg', 'gif', 'webp'}
    files_to_post = []
    
    for file in os.listdir(MEMES_FOLDER):
        file_path = os.path.join(MEMES_FOLDER, file)
        if os.path.isfile(file_path):
            ext = file.rsplit('.', 1)[1].lower() if '.' in file else ''
            if ext in allowed_extensions and not is_file_posted(file):
                files_to_post.append(file)
    
    return files_to_post

def post_image(filename):

    file_path = os.path.join(MEMES_FOLDER, filename)
    
    if not os.path.exists(file_path):
        logger.error(f"–§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return None
    
    files = {
        'images[]': (filename, open(file_path, 'rb'), f'image/{filename.split(".")[-1]}')
    }
    
    data = {
        'content': f'–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ—Å—Ç ü§ñ'
    }
    
    try:
        if not authenticate():
            logger.error("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç - –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
            return None
        
        response = session.post(
            urljoin(API_URL, 'posts/create'),
            data=data,
            files=files
        )
        
        files['images[]'][1].close()
        
        if response.status_code == 200:
            response_data = response.json()
            if response_data.get('success'):
                post_id = response_data.get('post', {}).get('id')
                logger.info(f"–£—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –ø–æ—Å—Ç —Å ID {post_id}, —Ñ–∞–π–ª: {filename}")
                return post_id
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞: {response_data.get('error')}")
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞. –ö–æ–¥: {response.status_code}, –û—Ç–≤–µ—Ç: {response.text}")
    
    except Exception as e:
        logger.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞: {str(e)}")
    
    return None

def publish_post():

    files_to_post = get_files_to_post()
    
    if not files_to_post:
        logger.info("–ù–µ—Ç –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
        return
    
    selected_file = random.choice(files_to_post)
    logger.info(f"–í—ã–±—Ä–∞–Ω —Ñ–∞–π–ª –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {selected_file}")
    
    post_id = post_image(selected_file)
    
    if post_id:
        mark_file_as_posted(selected_file, post_id)
        logger.info(f"–§–∞–π–ª {selected_file} —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –∏ –æ—Ç–º–µ—á–µ–Ω –≤ –ë–î")
    else:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Ñ–∞–π–ª {selected_file}")

def main():

    logger.info("–ó–∞–ø—É—Å–∫ UserBot –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤")
    
    init_database()
    
    if not authenticate():
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ TOKEN –∏–ª–∏ –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å.")
        sys.exit(1)
    
    files_count = len(get_files_to_post())
    logger.info(f"–î–æ—Å—Ç—É–ø–Ω–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {files_count}")
    
    schedule.every(1).hours.do(publish_post)
    logger.info("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ: –ø—É–±–ª–∏–∫–∞—Ü–∏—è –∫–∞–∂–¥—ã–π —á–∞—Å")
    
    logger.info("–ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø–µ—Ä–≤–æ–≥–æ –ø–æ—Å—Ç–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ...")
    publish_post()
    
    while True:
        schedule.run_pending()
        time.sleep(60)  

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        sys.exit(1)
